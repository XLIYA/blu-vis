import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export interface PDFExportOptions {
  filename?: string;
  title?: string;
  author?: string;
  subject?: string;
  orientation?: 'portrait' | 'landscape';
  format?: 'a4' | 'letter';
  includeHeader?: boolean;
  includeFooter?: boolean;
  headerText?: string;
  footerText?: string;
}

export async function exportDashboardToPDF(
  element: HTMLElement,
  options: PDFExportOptions = {}
): Promise<void> {
  const {
    filename = 'dashboard.pdf',
    title = 'Dashboard Report',
    author = 'BluVis Analytics',
    subject = 'Data Visualization Report',
    orientation = 'portrait',
    format = 'a4',
    includeHeader = true,
    includeFooter = true,
    headerText = 'Dashboard Report',
    footerText = 'Generated by BluVis Analytics',
  } = options;

  try {
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      logging: false,
      backgroundColor: '#ffffff',
      windowWidth: element.scrollWidth,
      windowHeight: element.scrollHeight,
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation,
      unit: 'mm',
      format,
    });

    pdf.setProperties({
      title,
      author,
      subject,
      creator: 'BluVis Analytics Platform',
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 15;
    const contentWidth = pageWidth - 2 * margin;
    const contentHeight = pageHeight - (includeHeader ? 30 : margin) - (includeFooter ? 20 : margin);

    let currentPage = 1;
    const imgWidth = contentWidth;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = includeHeader ? 30 : margin;

    // Add header to first page
    if (includeHeader) {
      addHeader(pdf, headerText, currentPage, pageWidth);
    }

    // Add first page image
    pdf.addImage(imgData, 'PNG', margin, position, imgWidth, Math.min(imgHeight, contentHeight));
    heightLeft -= contentHeight;

    // Add footer to first page
    if (includeFooter) {
      addFooter(pdf, footerText, currentPage, pageWidth, pageHeight);
    }

    // Add additional pages if needed
    while (heightLeft > 0) {
      currentPage++;
      pdf.addPage();
      position = heightLeft - imgHeight + (includeHeader ? 30 : margin);

      if (includeHeader) {
        addHeader(pdf, headerText, currentPage, pageWidth);
      }

      pdf.addImage(imgData, 'PNG', margin, position, imgWidth, Math.min(imgHeight, contentHeight));
      heightLeft -= contentHeight;

      if (includeFooter) {
        addFooter(pdf, footerText, currentPage, pageWidth, pageHeight);
      }
    }

    pdf.save(filename);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
}

export async function exportChartToPDF(
  chartElement: HTMLElement,
  chartTitle: string,
  options: PDFExportOptions = {}
): Promise<void> {
  const {
    filename = 'chart.pdf',
    title = chartTitle,
    orientation = 'landscape',
  } = options;

  try {
    const canvas = await html2canvas(chartElement, {
      scale: 3,
      useCORS: true,
      logging: false,
      backgroundColor: '#ffffff',
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: canvas.width > canvas.height ? 'landscape' : 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    pdf.setProperties({
      title: chartTitle,
      author: 'BluVis Analytics',
      subject: 'Chart Export',
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 15;
    const maxWidth = pageWidth - 2 * margin;
    const maxHeight = pageHeight - 50;

    const imgWidth = Math.min(maxWidth, (canvas.width * maxHeight) / canvas.height);
    const imgHeight = (canvas.height * imgWidth) / canvas.width;

    // Add title
    pdf.setFontSize(18);
    pdf.setTextColor(0, 0, 0);
    pdf.text(chartTitle, pageWidth / 2, 20, { align: 'center' });

    // Add chart image
    const xPos = (pageWidth - imgWidth) / 2;
    const yPos = 30;
    pdf.addImage(imgData, 'PNG', xPos, yPos, imgWidth, Math.min(imgHeight, maxHeight));

    // Add footer
    pdf.setFontSize(10);
    pdf.setTextColor(128, 128, 128);
    pdf.text('Generated by BluVis Analytics', pageWidth / 2, pageHeight - 10, {
      align: 'center',
    });

    pdf.save(filename);
  } catch (error) {
    console.error('Error generating chart PDF:', error);
    throw new Error('Failed to export chart. Please try again.');
  }
}

export async function exportMultipleChartsToPDF(
  charts: { element: HTMLElement; title: string }[],
  options: PDFExportOptions = {}
): Promise<void> {
  const { filename = 'charts-report.pdf', title = 'Charts Report' } = options;

  try {
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    pdf.setProperties({
      title,
      author: 'BluVis Analytics',
      subject: 'Multiple Charts Report',
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let isFirstPage = true;

    for (const chart of charts) {
      if (!isFirstPage) {
        pdf.addPage();
      }
      isFirstPage = false;

      const canvas = await html2canvas(chart.element, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff',
      });

      const imgData = canvas.toDataURL('image/png');
      const margin = 15;
      const maxWidth = pageWidth - 2 * margin;
      const maxHeight = pageHeight - 50;

      const imgWidth = Math.min(maxWidth, (canvas.width * maxHeight) / canvas.height);
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      pdf.setFontSize(16);
      pdf.text(chart.title, pageWidth / 2, 20, { align: 'center' });

      const xPos = (pageWidth - imgWidth) / 2;
      pdf.addImage(imgData, 'PNG', xPos, 30, imgWidth, Math.min(imgHeight, maxHeight));

      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text(`Page ${pdf.internal.pages.length - 1}`, pageWidth - 20, pageHeight - 10);
    }

    pdf.save(filename);
  } catch (error) {
    console.error('Error generating multi-chart PDF:', error);
    throw new Error('Failed to export charts. Please try again.');
  }
}

function addHeader(pdf: jsPDF, text: string, pageNumber: number, pageWidth: number): void {
  pdf.setFontSize(14);
  pdf.setTextColor(60, 60, 60);
  pdf.text(text, pageWidth / 2, 15, { align: 'center' });

  pdf.setLineWidth(0.5);
  pdf.setDrawColor(200, 200, 200);
  pdf.line(15, 20, pageWidth - 15, 20);
}

function addFooter(
  pdf: jsPDF,
  text: string,
  pageNumber: number,
  pageWidth: number,
  pageHeight: number
): void {
  pdf.setFontSize(9);
  pdf.setTextColor(128, 128, 128);
  pdf.text(text, pageWidth / 2, pageHeight - 10, { align: 'center' });
  pdf.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10, { align: 'right' });
}